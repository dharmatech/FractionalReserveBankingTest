@page "/banking-system"

@*@using Bank*@

@code {
public class Bank
    {
        // Assets
        public decimal Reserves { get; set; }
        public decimal Loans { get; set; }
        public decimal Securities { get; set; }

        // Liabilities and Bank capital
        public decimal Deposits { get; set; }

        public decimal Debt { get; set; }

        public decimal Capital { get; set; }

        public decimal ExcessReserves() => (0.9m * (Deposits + Debt + Capital) - (Loans + Securities));

        //public decimal LeverageRatio() => (Reserves + Loans + Securities) / Capital;

        public decimal? LeverageRatio() => 
            Capital == 0m ? null : (Reserves + Loans + Securities) / Capital;

        public void Deposit(decimal amount)
        {
            //Console.WriteLine("> Deposit({0})\n", amount);
            Deposits = Deposits + amount;
            Reserves = Reserves + amount;
        }

        public void Withdraw(decimal amount)
        {
            Deposits = Deposits - amount;
            Reserves = Reserves - amount;
        }


        public void AddCapital(decimal amount)
        {
            Capital = Capital + amount;
            Reserves = Reserves + amount;
        }

        public void RemoveCapital(decimal amount)
        {
            Capital = Capital - amount;
            Reserves = Reserves - amount;
        }

        public void AddDebt(decimal amount)
        {
            Debt = Debt + amount;
            Reserves = Reserves + amount;
        }

        public void PayDebt(decimal amount)
        {
            Debt = Debt - amount;
            Reserves = Reserves - amount;
        }


        public void Loan(decimal amount)
        {
            if (amount > ExcessReserves())
                throw new Exception("amount > ExcessReserves");

            Reserves = Reserves - amount;

            Loans = Loans + amount;
        }

        public void PayLoan(decimal amount)
        {
            Reserves = Reserves + amount;

            Loans = Loans - amount;
        }

        public void BuySecurity(decimal amount)
        {
            if (amount > ExcessReserves())
                throw new Exception("amount > ExcessReserves");

            Reserves = Reserves - amount;

            Securities = Securities + amount;
        }

        public void SellSecurity(decimal amount)
        {
            Reserves = Reserves + amount;

            Securities = Securities - amount;
        }

        public void SecuritiesProfit(decimal amount)
        {
            Securities = Securities + amount;
            Capital = Capital + amount;
        }

        public void LoanDefault(decimal amount)
        {
            Loans = Loans - amount;
            Capital = Capital - amount;
        }

        public void Info()
        {
            Console.WriteLine("Reserves: {0} Excess Reserves: {3} Loans: {1} Securities: {4} Deposits: {2} Debt: {5} Capital: {6}",
                Reserves, Loans, Deposits, ExcessReserves());
        }

        public void TAccount()
        {
            Console.WriteLine("ASSETS                  LIABILITIES AND OWNERS' EQUITY");
            Console.WriteLine("Reserves:   {0,7:N2}     Deposits: {1,7:N2}", Reserves, Deposits);
            Console.WriteLine("Loans:      {0,7:N2}     Debt:     {1,7:N2}", Loans, Debt);
            Console.WriteLine("Securities: {0,7:N2}     Capital:  {1,7:N2}", Securities, Capital);

            Console.WriteLine();
            Console.WriteLine("Totals:     {0,7:N2}               {1,7:N2}", Reserves + Loans + Securities, Deposits + Debt + Capital);

            Console.WriteLine();
            Console.WriteLine("Excess reserves: {0:N2}", ExcessReserves());
            Console.WriteLine();
        }
    }

    public class Economy
    {
        public decimal Cash { get; set; }
        public Bank Bank { get; set; } = new Bank();

        public void AddCash(decimal amount)
        {
            Cash = Cash + amount;
        }

        public void Deposit(decimal amount)
        {
            Console.WriteLine("Deposit({0})", amount);

            if (amount > Cash) throw new Exception("amount > Cash");

            Cash = Cash - amount;

            Bank.Deposit(amount);
        }

        public void Loan(decimal amount)
        {
            Console.WriteLine("Loan({0})", amount);

            Bank.Loan(amount);

            Cash = Cash + amount;
        }

        public decimal MoneySupply() => Bank.Deposits + Cash;

        public void Info()
        {
            Console.WriteLine("Cash: {4,7:N2} Reserves: {0,7:N2} Excess Reserves: {3,7:N2} Loans: {1,7:N2} Deposits: {2,7:N2}    Money supply: {5,7:N2}",
                Bank.Reserves, Bank.Loans, Bank.Deposits, Bank.ExcessReserves(), Cash, MoneySupply());
        }
    }
}

@code {
    public Economy economy_base = new Economy() { Cash = 100 };

    public Economy economy = new Economy() { Cash = 100 };

    public decimal max_debt_to_add = 100;
    public decimal debt_to_add = 0;

    public decimal max_cash_to_add = 100;
    public decimal cash_to_add = 0;



    public decimal deposit = 0;

    private decimal loan = 0;
    private decimal loan_default;

    public decimal max_capital_to_add = 100;
    public decimal capital_to_add = 0;

    public decimal securities;
    public decimal securities_profit;

    void CopyEconomy(Economy a, Economy b)
    {
        b.Cash          = a.Cash;

        b.Bank.Reserves   = a.Bank.Reserves;
        b.Bank.Loans      = a.Bank.Loans;
        b.Bank.Securities = a.Bank.Securities;
        b.Bank.Deposits   = a.Bank.Deposits;        
        b.Bank.Debt       = a.Bank.Debt;        
        b.Bank.Capital    = a.Bank.Capital;        
    }

    void OnChangeAddDebt(decimal value)
    {
        CopyEconomy(economy_base, economy);
                
        economy.Bank.AddDebt(value);
    }

    void OnCommitAddDebt()
    {
        CopyEconomy(economy, economy_base);

        debt_to_add = 0;
    }

    void OnChangeAddCash(decimal value)
    {
        CopyEconomy(economy_base, economy);
                
        economy.AddCash(value);
    }

    void OnCommitAddCash()
    {
        CopyEconomy(economy, economy_base);

        cash_to_add = 0;
    }


    void OnChangeDeposit(decimal value)
    {
        CopyEconomy(economy_base, economy);

        economy.Deposit(value);
    }

    void CommitDeposit()
    {
        //economy.Deposit(deposit);

        economy_base.Cash                = economy.Cash;                                         
        economy_base.Bank.Reserves       = economy.Bank.Reserves;
        economy_base.Bank.Loans          = economy.Bank.Loans;
        economy_base.Bank.Deposits       = economy.Bank.Deposits;
        //economy_base.Bank.ExcessReserves = economy.Bank.ExcessReserves;

        deposit = 0;
    }

    void OnChangeAddCapital(decimal value)
    {
        CopyEconomy(economy_base, economy);

        economy.Bank.AddCapital(value);
    }

    void AddCapital()
    {
        CopyEconomy(economy, economy_base);

        capital_to_add = 0;
    }

    void OnChangeLoan(decimal value)
    {
        economy.Cash = economy_base.Cash;

        economy.Bank.Reserves = economy_base.Bank.Reserves;
        economy.Bank.Loans = economy_base.Bank.Loans;
        economy.Bank.Deposits = economy_base.Bank.Deposits;
        //economy.Bank.ExcessReserves = economy_base.Bank.ExcessReserves;

        economy.Loan(value);
    }

    void CommitLoan()
    {
        //economy.Loan(loan);

        economy_base.Cash                = economy.Cash;                                         
        economy_base.Bank.Reserves       = economy.Bank.Reserves;
        economy_base.Bank.Loans          = economy.Bank.Loans;
        economy_base.Bank.Deposits       = economy.Bank.Deposits;
        //economy_base.Bank.ExcessReserves = economy.Bank.ExcessReserves;

        loan = 0;
    }

    void OnChangeLoanDefault(decimal value)
    {
        CopyEconomy(economy_base, economy);

        economy.Bank.LoanDefault(value);
    }

    void OnCommitLoanDefault()
    {
        CopyEconomy(economy, economy_base);

        //economy.Bank.LoanDefault(value);

        loan_default = 0;
    }

    void OnChangeBuySecurities(decimal value)
    {
        CopyEconomy(economy_base, economy);
                
        economy.Bank.BuySecurity(value);
    }

    void OnCommitBuySecurity()
    {
        CopyEconomy(economy, economy_base);

        securities = 0;
    }

    void OnChangeSecuritiesProfit(decimal value)
    {
        CopyEconomy(economy_base, economy);

        economy.Bank.SecuritiesProfit(value);
    }

    void OnCommitSecuritiesProfit()
    {
        CopyEconomy(economy, economy_base);

        securities_profit = 0;
    }
}



@*@if (economy.Cash == economy_base.Cash)
{
    <span>
        Cash: @(economy.Cash) 
    </span>
}
else
{
    <span>
        Cash: @(economy_base.Cash)
        <span style="color: purple;">
            (@(economy.Cash))
        </span>
    </span>    
}*@


@{
    void Template(string label, decimal? a, decimal? b)
    {
    @if (a == b)
            {
    <span>
                                                @label @(String.Format("{0:N2}", a))
    </span>
            }
            else
            {
    <span>
                                                @label @(String.Format("{0:N2}", b))
                                                <span style="color: purple;">
                                                    (@(String.Format("{0:N2}", a)))
                                                </span>
    </span>    
            }
    }
}

@{
    Template("Cash", economy.Cash, economy_base.Cash);
}

<br />

<table class="table" style="max-width:800px;">
    <thead>

        <tr>
            <th>ASSETS</th>
            
            <th>LIABILITIES AND OWNERS' EQUITY</th>
            
        </tr>
        
    </thead>
    <tbody>

        <tr>
            <td>
                <table>
                    <tr>
                        <td>Reserves</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Reserves, economy_base.Bank.Reserves); }</td>
                    </tr>

                    <tr>
                        <td>Loans</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Loans, economy_base.Bank.Loans); }</td>
                    </tr>

                    <tr>
                        <td>Securities</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Securities, economy_base.Bank.Securities); }</td>
                    </tr>
                </table>
            </td>

            <td>
                <table>
                    <tr>
                        <td>Deposits</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Deposits, economy_base.Bank.Deposits); } </td>
                    </tr>
                    <tr>
                        <td>Debt</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Debt, economy_base.Bank.Debt); } </td>
                    </tr>
                    <tr>
                        <td>Capital</td>
                        <td style="text-align: right;">@{ Template("", economy.Bank.Capital, economy_base.Bank.Capital); } </td>
                    </tr>
                </table>
            </td>

        </tr>

    </tbody>
</table>



Reserve ratio: 10% <br />

@{ Template("Excess reserves", economy.Bank.ExcessReserves(), economy_base.Bank.ExcessReserves()); } <br />

@{ Template("Money supply", economy.MoneySupply(), economy_base.MoneySupply()); } <br />

@{ Template("Leverage ratio", economy.Bank.LeverageRatio(), economy_base.Bank.LeverageRatio()); } <br />


<div>
    <RadzenSlider Style="width: 40%; " @bind-Value=@cash_to_add TValue="decimal" Min="0" Max="@(max_cash_to_add)" Change=@(arg => OnChangeAddCash(arg)) />

    Max:<input style="max-width: 75px;" @bind="max_cash_to_add" />

    <button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="OnCommitAddCash">
        Add cash: @cash_to_add
    </button>

    <br />
</div>

<RadzenSlider Style="width: 40%; " @bind-Value=@capital_to_add TValue="decimal" Min="0" Max="@(max_capital_to_add)" Change=@(arg => OnChangeAddCapital(arg)) />

Max:<input style="max-width: 75px;" @bind="max_capital_to_add" />

<button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="AddCapital">
    Add Capital: @capital_to_add
</button>

<br />

<div>
    <RadzenSlider Style="width: 40%; " @bind-Value=@debt_to_add TValue="decimal" Min="0" Max="@(max_debt_to_add)" Change=@(arg => OnChangeAddDebt(arg)) />

    Max:<input style="max-width: 75px;" @bind="max_debt_to_add" />

    <button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="OnCommitAddDebt">
        Add debt @debt_to_add
    </button>

    <br />
</div>


<RadzenSlider Style="width: 50%; " @bind-Value=@deposit TValue="decimal" Min="0" Max="@(Math.Max(economy_base.Cash, 0.1m))" Change=@(arg => OnChangeDeposit(arg)) />

<button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="CommitDeposit">
    Deposit @deposit
</button>

<RadzenSlider Style="width: 50%;" @bind-Value=@loan TValue="decimal" Min="0" Max="@(Math.Max(economy_base.Bank.ExcessReserves(), 0.1m))" Change=@(arg => OnChangeLoan(arg)) />

<button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="CommitLoan">
    Loan @loan
</button>



<RadzenSlider Style="width: 50%;" @bind-Value=@loan_default TValue="decimal" Min="0" Max="@(Math.Max(economy_base.Bank.Loans, 0.1m))" Change=@(arg => OnChangeLoanDefault(arg)) />

<button class="btn btn-danger btn-sm" style="width: 150px;" @onclick="OnCommitLoanDefault">
    Loan default @loan_default
</button>



<div>
    <RadzenSlider Style="width: 50%;" @bind-Value=@securities TValue="decimal" Min="0" Max="@(Math.Max(economy_base.Bank.ExcessReserves(), 0.1m))" Change=@(arg => OnChangeBuySecurities(arg)) />

    <button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="OnCommitBuySecurity">
        Buy security @securities
    </button>
</div>



@*
@code {
    private string number_to_class(decimal value)
    {
        if (value >= 0) return "btn btn-success";
        if (value < 0) return "btn btn-danger";
        return "btn btn-primary";
    }
}
*@

<div>
    <RadzenSlider Style="width: 50%;" @bind-Value=@securities_profit TValue="decimal" Min="0" Max="@(Math.Max(economy_base.Bank.Securities, 0.1m))" Change=@(arg => OnChangeSecuritiesProfit(arg)) />
    
    @*
    <RadzenSlider Style="width: 60%;" @bind-Value=@securities_profit TValue="decimal" Min="@(-Math.Max(economy_base.Bank.Securities, 0.1m))" Max="@(Math.Max(economy_base.Bank.Securities, 0.1m))" Change=@(arg => OnChangeSecuritiesProfit(arg)) />
    *@
    
    <button class="btn btn-success btn-sm" style="width: 150px;" @onclick="OnCommitSecuritiesProfit">
        Securities profit @securities_profit
    </button>
    

    @*
    <button class="@number_to_class(securities_profit)" style="width: 150px;" @onclick="OnCommitSecuritiesProfit">
        Securities profit @securities_profit
    </button>
    *@
</div>
