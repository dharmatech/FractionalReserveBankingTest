@page "/banking-system"

@using Bank

@code {
    public Economy economy_base = new Economy() { Cash = 100 };

    public Economy economy = new Economy() { Cash = 100 };

    public decimal max_debt_to_add = 100;
    public decimal debt_to_add = 0;

    public decimal max_cash_to_add = 100;
    public decimal cash_to_add = 0;

    public decimal max_capital_to_add = 100;
    public decimal capital_to_add = 0;

    void CopyEconomy(Economy a, Economy b)
    {
        b.Cash          = a.Cash;

        b.Bank.Reserves   = a.Bank.Reserves;
        b.Bank.Loans      = a.Bank.Loans;
        b.Bank.Securities = a.Bank.Securities;
        b.Bank.Deposits   = a.Bank.Deposits;        
        b.Bank.Debt       = a.Bank.Debt;        
        b.Bank.Capital    = a.Bank.Capital;        
    }

    void OnChangeAddDebt(decimal value)          { CopyEconomy(economy_base, economy); economy.Bank.AddDebt(value); }
    void OnChangeAddCash(decimal value)          { CopyEconomy(economy_base, economy); economy.AddCash(value); }
        
    void OnChangeAddCapital(decimal value)       { CopyEconomy(economy_base, economy); economy.Bank.AddCapital(value); }
    
    void OnCommitAddDebt()          { CopyEconomy(economy, economy_base); debt_to_add = 0; }
    void OnCommitAddCash()          { CopyEconomy(economy, economy_base); cash_to_add = 0; }
    
    void AddCapital()               { CopyEconomy(economy, economy_base); capital_to_add = 0; }
    
}

@{
    void Template(string label, decimal? a, decimal? b)
    {
    @if (a == b)
        {
    <span>
                            @label @(String.Format("{0:N2}", a))
    </span>
        }
        else
        {
    <span>
                            @label @(String.Format("{0:N2}", b))
                            <span style="color: purple;">
                                (@(String.Format("{0:N2}", a)))
                            </span>
    </span>
        }
    }
}

@{
    Template("Cash", economy.Cash, economy_base.Cash); 
}

<br />

<table class="table" style="max-width:800px;">
    <thead>

        <tr>
            <th>ASSETS</th>

            <th>LIABILITIES AND OWNERS' EQUITY</th>

        </tr>

    </thead>
    <tbody>

        <tr>
            <td>
                <table>
                    <tr>
                        <td>Reserves</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Reserves, economy_base.Bank.Reserves); 
                            }</td>
                    </tr>

                    <tr>
                        <td>Loans</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Loans, economy_base.Bank.Loans); 
                            }</td>
                    </tr>

                    <tr>
                        <td>Securities</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Securities, economy_base.Bank.Securities); 
                            }</td>
                    </tr>
                </table>
            </td>

            <td>
                <table>
                    <tr>
                        <td>Deposits</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Deposits, economy_base.Bank.Deposits); 
                            } </td>
                    </tr>
                    <tr>
                        <td>Debt</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Debt, economy_base.Bank.Debt); 
                            } </td>
                    </tr>
                    <tr>
                        <td>Capital</td>
                        <td style="text-align: right;">@{
                                Template("", economy.Bank.Capital, economy_base.Bank.Capital); 
                            } </td>
                    </tr>
                </table>
            </td>

        </tr>

    </tbody>
</table>



Reserve ratio: 10% <br />

@{
    Template("Excess reserves", economy.Bank.ExcessReserves(), economy_base.Bank.ExcessReserves()); 
} <br />

@{
    Template("Money supply", economy.MoneySupply(), economy_base.MoneySupply()); 
} <br />

@{
    Template("Leverage ratio", economy.Bank.LeverageRatio(), economy_base.Bank.LeverageRatio()); 
} <br />


<div>
    <RadzenSlider Style="width: 40%; " @bind-Value=@cash_to_add TValue="decimal" Min="0" Max="@(max_cash_to_add)" Change=@(arg => OnChangeAddCash(arg)) />

    Max:<input style="max-width: 75px;" @bind="max_cash_to_add" />

    <button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="OnCommitAddCash">
        Add cash: @cash_to_add
    </button>

    <br />
</div>

<RadzenSlider Style="width: 40%; " @bind-Value=@capital_to_add TValue="decimal" Min="0" Max="@(max_capital_to_add)" Change=@(arg => OnChangeAddCapital(arg)) />

Max:<input style="max-width: 75px;" @bind="max_capital_to_add" />

<button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="AddCapital">
    Add Capital: @capital_to_add
</button>

<br />

<div>
    <RadzenSlider Style="width: 40%; " @bind-Value=@debt_to_add TValue="decimal" Min="0" Max="@(max_debt_to_add)" Change=@(arg => OnChangeAddDebt(arg)) />

    Max:<input style="max-width: 75px;" @bind="max_debt_to_add" />

    <button class="btn btn-primary btn-sm" style="width: 150px;" @onclick="OnCommitAddDebt">
        Add debt @debt_to_add
    </button>

    <br />
</div>

@code { private decimal deposit = 0; }

<SliderButton Label="Deposit" @bind-Val="@deposit" Max="economy_base.Cash" 
    ChangeProc="@(arg => { CopyEconomy(economy_base, economy); economy.Deposit(arg); })"
    CommitProc="@(() => { CopyEconomy(economy, economy_base); deposit = 0; })" />

<SliderButtonAlt2 Label="Deposit" @bind-Val="@deposit" Max="economy_base.Cash" 
    ChangeProc="@(arg => { CopyEconomy(economy_base, economy); economy.Deposit(arg); })"
    CommitProc="@(() => { CopyEconomy(economy, economy_base); deposit = 0; })" />

<SliderButtonAlt3 Label="Deposit" @bind-Val="@deposit" Max="economy_base.Cash" 
    ChangeProc="@(arg => { CopyEconomy(economy_base, economy); economy.Deposit(arg); })"
    CommitProc="@(() => { CopyEconomy(economy, economy_base); deposit = 0; })" />     

SliderButtonAlt3

<SliderButtonAlt4 Label="Deposit" @bind-Val="@deposit" Max="economy_base.Cash" 
    ChangeProc="@(arg => { CopyEconomy(economy_base, economy); economy.Deposit(arg); })"
    CommitProc="@(() => { CopyEconomy(economy, economy_base); deposit = 0; })" />     

SliderButtonAlt4

<SliderButtonAlt5 Label="Deposit" @bind-Val=@deposit Max=economy_base.Cash 
    ChangeProc=@(arg => { CopyEconomy(economy_base, economy); economy.Deposit(arg); })
    CommitProc=@(() => { CopyEconomy(economy, economy_base); deposit = 0; }) />     

SliderButtonAlt5

@code { private decimal loan = 0; }

<SliderButton Label="Loan" @bind-Val="@loan" Max="economy_base.Bank.ExcessReserves()" 
    ChangeProc="@(value => { CopyEconomy(economy_base, economy); economy.Loan(value); })" 
    CommitProc=@(() => { CopyEconomy(economy, economy_base); loan = 0; }) />

@code { private decimal loan_default; }

<SliderButton ButtonStyle="btn-danger" Label="Loan default" @bind-Val="@loan_default" Max="economy_base.Bank.Loans"
    ChangeProc=@(value => { CopyEconomy(economy_base, economy); economy.Bank.LoanDefault(value); })
    CommitProc=@(() => { CopyEconomy(economy, economy_base); loan_default = 0; }) />

@code { public decimal securities; }

<SliderButton Label="Buy security" @bind-Val="@securities" Max="economy_base.Bank.ExcessReserves()" 
    ChangeProc=@(value => { CopyEconomy(economy_base, economy); economy.Bank.BuySecurity(value); })
    CommitProc=@(() => { CopyEconomy(economy, economy_base); securities = 0; }) />

@code { public decimal securities_profit; }

<SliderButton ButtonStyle="btn-success" Label="Securities profit" @bind-Val="@securities_profit" Max="economy_base.Bank.Securities"       
    ChangeProc=@(value => { CopyEconomy(economy_base, economy); economy.Bank.SecuritiesProfit(value); })
    CommitProc=@(() => { CopyEconomy(economy, economy_base); securities_profit = 0; }) />

